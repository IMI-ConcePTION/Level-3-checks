Date_event = Date_event,
Birth_date = Birth_date,
Strata = by_colls
)
Dataset <- merge(x = Dataset, y = Events, by = by_colls, all.x = T )
View(Dataset)
Dataset[is.na(Dataset), ] <- 0
lapply(Outcomes_rec[Rec_period == 0], function(x) Dataset[, eval(paste0("Persontime_", x)) := Persontime])
if(Aggregate == F & !is.null(Outcomes_rec)){
Dataset_events <- CleanOutcomes(Dataset = readRDS(tmpname), Person_id = "person_id", Rec_period = Rec_period, Outcomes = Outcomes_rec, Name_event = "name_event", Date_event = "date_event")
if(print) print("Calculate recurrent events not aggregated")
#if(!is.null(Age_bands)) Str = c(Strata, Increment, "Ageband")
#if(is.null(Age_bands)) Str = c(Strata, Increment)
Dataset <- CalculateSubstractionDenominator(
Dataset = Dataset,
Start_date = Start_date,
End_date = End_date,
Dataset_events = Dataset_events,
Person_id = Person_id,
Name_event = Name_event,
Date_event = Date_event,
Outcomes_rec = Outcomes_rec,
Rec_period = Rec_period,
Aggregate = F,
Strata = by_colls,
Include_count = T,
print = print
)
rm(Dataset_events)
gc()
#temp <- copy(Dataset)
#Dataset <- copy(temp)
Dataset[is.na(Dataset), ] <- 0
#colls <- colnames(Dataset)[grepl(pattern = paste0(paste0(Outcomes_rec,"_b"), collapse = "|"), colnames(Dataset))]
colls <- Outcomes_rec[Rec_period != 0]
lapply(colls, function(x)
Dataset[, eval(paste0("Persontime_", x)) :=
fifelse(!is.na(get(paste0("SUBTRCUM_",x))),
get(End_date) - get(Start_date) + 1 - get(paste0("SUBTRCUM_",x)),
Persontime)
][, eval(paste0("SUBTRCUM_",x)) := NULL]
)
rm(colls)
lapply(Outcomes_rec[Rec_period == 0], function(x) Dataset[, eval(paste0("Persontime_", x)) := Persontime])
}
Outcomes <- c(Outcomes_nrec, Outcomes_rec)
if(length(Outcomes) > 0){
colls <- colnames(Dataset)[grepl(pattern = paste0(paste0(Outcomes_rec,"_b"), collapse = "|"), colnames(Dataset))]
B_MISSING <- Outcomes[!paste0(Outcomes,"_b") %in% unique(colnames(Dataset))]
if(length(B_MISSING) > 0) lapply(paste0(B_MISSING,"_b"), function(x){Dataset <- Dataset[,eval(x) := 0]})
P_MISSING <- Outcomes[!paste0("Persontime_",Outcomes) %in% unique(colnames(Dataset))]
if(length(P_MISSING) > 0) lapply(paste0("Persontime_",Outcomes), function(x){Dataset <- Dataset[,eval(x) := 0]})
rm(P_MISSING, B_MISSING)
}
rm(Outcomes)
setorderv(Dataset, sort_order)
rm(list = ls(all=TRUE))
library("peakRAM")
if (!require("rstudioapi")) install.packages("rstudioapi")
if (!require("data.table")) install.packages("data.table")
#library(peakRAM)
thisdir <- setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#r_file<-"CountPersonTimeV13.9.R"
#r_file<-"CountPersonTimeV13.8.R"
EVENTS1 <- readRDS(paste0(thisdir,"/EVENTS1.rds"))
PERIODS1 <- readRDS(paste0(thisdir,"/PERIODS1.rds"))
INC <- "month"
source("CleanOutcomes.R")
source("CreateAgebandIntervals.R")
source("CreateTimeIntervals.R")
source("CheckAndPrepareDates.R")
source("CalculateSubtractionDenominator.R")
source("CalculateNumeratorAggregated.R")
test <- c("CountPersonTimeV13.8.R", "CountPersonTimeV13.9.R")
for(i in 1:length(test)){
source(paste0(thisdir,"/",test[i]))
print(peakRAM(CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = T,
Rec_period = c(0, 0),
save_intermediate = paste0("C:/TEST",i,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = F
)
))
}
load(paste0("C:/TEST",1,".Rdata"))
test1 <- Dataset
load(paste0("C:/TEST",2,".Rdata"))
test2 <- Dataset
rm(Dataset)
#test1 == test2
rm(list = ls(all=TRUE))
library("peakRAM")
if (!require("rstudioapi")) install.packages("rstudioapi")
if (!require("data.table")) install.packages("data.table")
#library(peakRAM)
thisdir <- setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#r_file<-"CountPersonTimeV13.9.R"
#r_file<-"CountPersonTimeV13.8.R"
EVENTS1 <- readRDS(paste0(thisdir,"/EVENTS1.rds"))
PERIODS1 <- readRDS(paste0(thisdir,"/PERIODS1.rds"))
INC <- "month"
source("CleanOutcomes.R")
source("CreateAgebandIntervals.R")
source("CreateTimeIntervals.R")
source("CheckAndPrepareDates.R")
source("CalculateSubtractionDenominator.R")
source("CalculateNumeratorAggregated.R")
test <- c("CountPersonTimeV13.8.R", "CountPersonTimeV13.9.R")
for(i in 1:length(test)){
source(paste0(thisdir,"/",test[i]))
print(peakRAM(CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = T,
Rec_period = c(0, 0),
save_intermediate = paste0("C:/TEST",i,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = F
)
))
}
load(paste0("C:/TEST",1,".Rdata"))
test1 <- Dataset
load(paste0("C:/TEST",2,".Rdata"))
test2 <- Dataset
rm(Dataset)
#test1 == test2
test <- c("CountPersonTimeV13.8.R", "CountPersonTimeV13.9.R")
source(paste0(thisdir,"/",test[2]))
peakRAM(test2 <- CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = F,
Rec_period = c(10,5),
save_intermediate = paste0("C:/TEST",1,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = F
))
source(paste0(thisdir,"/",test[2]))
peakRAM(test2 <- CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = T,
Rec_period = c(0, 0),
save_intermediate = paste0("C:/TEST",1,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = F
))
source(paste0(thisdir,"/",test[2]))
peakRAM(test2 <- CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = T,
Rec_period = c(0, 0),
save_intermediate = paste0("C:/TEST",1,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = T
))
View(test2)
source(paste0(thisdir,"/",test[2]))
peakRAM(test2 <- CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = T,
Rec_period = c(0, 0),
save_intermediate = paste0("C:/TEST",1,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = T
))
source(paste0(thisdir,"/",test[2]))
peakRAM(test2 <- CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = T,
Rec_period = c(0, 5),
save_intermediate = paste0("C:/TEST",1,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = T
))
source(paste0(thisdir,"/",test[2]))
peakRAM(test2 <- CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = T,
Rec_period = c(0, 5),
save_intermediate = paste0("C:/TEST",1,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = T
))
View(test2)
source(paste0(thisdir,"/",test[2]))
peakRAM(test2 <- CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = T,
Rec_period = c(0, 0),
save_intermediate = paste0("C:/TEST",1,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = T
))
View(test2)
source(paste0(thisdir,"/",test[1]))
peakRAM(test1 <- CountPersonTime(
Dataset_events = EVENTS1,
Dataset = PERIODS1,
Person_id = "person_id",
Start_study_time = "20150101",
End_study_time = "20191231",
Start_date = "start_date",
End_date = "end_date",
Birth_date = "date_birth",
Strata = c("sex","city"),
Name_event = "name_event",
Date_event = "date_event",
Age_bands = c(0,17,44,64),
Increment = INC,
Outcomes_rec = c("outcome1","outcome2"),
Unit_of_age = "year",
include_remaning_ages = T,
Aggregate = T,
Rec_period = c(0, 0),
save_intermediate = paste0("C:/TEST",1,".Rdata"),
load_intermediate = F,
check_overlap = F,
print = T
))
View(test1)
View(test2)
sum(test1$outcome1_b)
sum(test2$outcome1_b)
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
########################################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
########################################################################################################################
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry")
########################################################################################################################
#Specify all variables of interest to generate the Lifestyle report
########################################################################################################################
#Variables of interest:Smoking, Folic acid use, Alcohol abuse, BMI, SES
#1.Identify the CDM table you used to save the information about the variables of interest.
#2.Identify the original name of the variable of interest.
#3.Use the information above to complete the list below.
#4.CDM_table:name of the CDM table where you saved the information.
#5.CDM_column: name of the CDM column where you saved the information about the name of the variable of interest.
#6.value: name of the original variable.
#7.c.voc: name of the CDM column where you saved the vocabulary representing the variable of interest.If no vocabulary fill NULL
#8.v.voc: the vocabulary used for the variable of interest.If no vocabulary fill NULL
#9.v.date: name of the CDM column which saves the date of recording.
#10.If you don't have information about a variable then delete that section and use Lifestyle <- list()
#example BMI(saved in MEDICAL_OBSERVATIONS, original name: body_mass_index, unit:kg/m2)
#  BMI = list(
#    CDM_table = "MEDICAL_OBSERVATIONS",
#    CDM_column = "mo_source_column",
#    value = "body_mass_index",
#    c.voc = "mo_record_vocabulary",
#    v.voc = "ICD9",
#    v.date = "mo_date"
#  )
#Smoking = list(
#  CDM_table = "SURVEY_OBSERVATIONS",
#  CDM_column = "so_source_column",
#  value = c("SMOKING","SMOKESEV"),
#  c.voc = NULL,
#  v.voc = NULL,
#  v.date = "so_date"
#)
Lifestyle <- list()
# Lifestyle <- list(
#   Smoking = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Folic_acid = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Alcohol = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   BMI = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   ),
#   SES = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   )
# )
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
source(paste0(pre_dir,"study_parameters.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
#Create report
for(i in readRDS(paste0(std_pop_tmp,"SCHEME_06.rds"))[["subpopulations"]]){
if(SUBP) {
report_dir1 <- paste0(std_source_pop_dir,i)
report_dir2 <- paste0(std_source_pop_dir,i,"/Masked")
}else{
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
}
rmarkdown::render(paste0(pre_dir,"Report_01_StudyPopulation.Rmd"),
output_file = paste0(report_dir1,"/","Report_01_Study_population_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_02_Dates.Rmd"),
output_file = paste0(report_dir1,"/","Report_02_Dates_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_03_VisitsLifestyle.Rmd"),
output_file = paste0(report_dir1,"/","Report_03_VisitsLifestyle_",i,".html"),
output_dir = report_dir1
)
rm(report_dir1,report_dir2)
}
#Create report
for(i in readRDS(paste0(std_pop_tmp,"SCHEME_06.rds"))[["subpopulations"]]){
if(SUBP) {
report_dir1 <- paste0(std_source_pop_dir,i)
report_dir2 <- paste0(std_source_pop_dir,i,"/Masked")
}else{
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
}
rmarkdown::render(paste0(pre_dir,"Report_01_StudyPopulation.Rmd"),
output_file = paste0(report_dir1,"/","Report_01_Study_population_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_02_Dates.Rmd"),
output_file = paste0(report_dir1,"/","Report_02_Dates_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_03_VisitsLifestyle.Rmd"),
output_file = paste0(report_dir1,"/","Report_03_VisitsLifestyle_",i,".html"),
output_dir = report_dir1
)
rm(report_dir1,report_dir2)
}
VISITS <- readRDS("H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_intermediate/tmp/STUDY_SOURCE_POPULATION/VISITS.rds")
View(VISITS)
View(SCHEME_0113)
