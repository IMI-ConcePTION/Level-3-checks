for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
} else {
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
}
#######################################################
#std_source_pop_dir output folder for study_source population
#std_pop_tmp output folder for temporary files
#############################################################
source(paste0(pre_dir,"functions/", "CreateSpells_v_10.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV12.5.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV13.6.R"))
source(paste0(pre_dir,"functions/", "DRECountThresholdV3.R"))
source(paste0(pre_dir,"functions/", "FUNCTIONS.R"))
#Set parameters
source(paste0(pre_dir,"Step_00_SetParameters.R"))
#Author: Vjola Hoxhaj Drs./Roel Elbers MSc.
#email: v.hoxhaj@umcutrecht.nl/r.j.h.elbers@umcutrecht.nl
#Organisation: UMC Utrecht, Utrecht, The Netherlands
#Date: 15/07/2021
#################################################################
#Study_population and Source_population
################################################################
########################################################
#Create output folders
########################################################
if (subpopulations_present=="No"){
#output folder for STUDY_SOURCE_POPULATION report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
} else {
#Create the  folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
} else {
#output folder for MEDICINES report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
do.call(file.remove, list(list.files(std_source_pop_dir, full.names = T)))
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
} else {
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
}
#######################################################
#std_source_pop_dir output folder for study_source population
#std_pop_tmp output folder for temporary files
#############################################################
#Load functions
source(paste0(pre_dir,"functions/", "CreateSpells_v_10.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV12.5.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV13.6.R"))
source(paste0(pre_dir,"functions/", "DRECountThresholdV3.R"))
source(paste0(pre_dir,"functions/", "FUNCTIONS.R"))
#Set parameters
source(paste0(pre_dir,"Step_00_SetParameters.R"))
print('Import and append observation periods files')
OBSERVATION_PERIODS <- IMPORT_PATTERN(pat = "OBSERVATION_PERIODS", dir = path_dir)
path_dir
View(OBSERVATION_PERIODS)
print('Set start and end date to date format and if end date is empty fill with end study date')
lapply(c("op_start_date","op_end_date"), function (x) OBSERVATION_PERIODS <- OBSERVATION_PERIODS[,eval(x) := as.IDate(as.character(get(x)),"%Y%m%d")])
OBSERVATION_PERIODS <- OBSERVATION_PERIODS[is.na(op_end_date), op_end_date := end_study_date]
FlowChartCreateSpells <- list()
SUBP
######################################################################################################################
print("Create spells and select latest for ALL")
before <- nrow(OBSERVATION_PERIODS)
OBSERVATION_PERIODS1 <- CreateSpells(
dataset=OBSERVATION_PERIODS,
id="person_id" ,
start_date = "op_start_date",
end_date = "op_end_date",
overlap = FALSE,
only_overlaps = F
)
View(OBSERVATION_PERIODS1)
OBSERVATION_PERIODS1 <- OBSERVATION_PERIODS1[,temp := lapply(.SD, max), by = c("person_id"), .SDcols = "num_spell"][temp == num_spell,][,temp := NULL]
View(OBSERVATION_PERIODS1)
setnames(OBSERVATION_PERIODS1, "entry_spell_category", "op_start_date")
setnames(OBSERVATION_PERIODS1, "exit_spell_category", "op_end_date")
OBSERVATION_PERIODS1[,op_start_date := as.IDate(op_start_date)]
OBSERVATION_PERIODS1[,op_end_date := as.IDate(op_end_date)]
std_pop_tmp
after <- nrow(OBSERVATION_PERIODS1)
FlowChartCreateSpells[["Spells_ALL"]]$step <- "01_CreateSpells"
FlowChartCreateSpells[["Spells_ALL"]]$population <- "ALL"
FlowChartCreateSpells[["Spells_ALL"]]$before <- before
FlowChartCreateSpells[["Spells_ALL"]]$after <- after
rm(OBSERVATION_PERIODS1)
View(FlowChartCreateSpells)
saveRDS(FlowChartCreateSpells, file = paste0(std_pop_tmp,"FlowChartCreateSpells.rds"))
std_pop_tmp
saveRDS(FlowChartCreateSpells, file = paste0(std_pop_tmp,"FlowChartCreateSpells.rds"))
if(exists("FlowChartOverlap")){
saveRDS(FlowChartOverlap, file = paste0(std_pop_tmp,"FlowChartOverlap.rds"))
rm(FlowChartOverlap)
}
rm(before,after,OBSERVATION_PERIODS,FlowChartCreateSpells)
gc()
print('Import and append persons files')
PERSONS <- IMPORT_PATTERN(pat = "PERSONS", dir = path_dir)
print('Remove abbundant variables')
lapply(c("race","country_of_birth","quality"), function (x) PERSONS <- PERSONS[,eval(x) := NULL])
c("race","country_of_birth","quality")
dates_persons <- c("year_of_birth", "month_of_birth","day_of_birth","year_of_death", "month_of_death","day_of_death")
print('Check if date variables are integer, if not set to integer')
PERSONS$month_of_birth <- as.character(PERSONS$month_of_birth)
invisible(lapply(dates_persons, function (x) if (class(PERSONS[[x]]) != "integer") PERSONS[, eval(x) := as.integer(get(x)) ]))
print('Inpute birth and death day and month')
PERSONS[is.na(day_of_birth) & is.na(month_of_birth) & !is.na(year_of_birth), ':=' (day_of_birth = 1, month_of_birth = 6, inputed_birth_day = T,inputed_birth_month = T)]
PERSONS[is.na(day_of_birth) & !is.na(year_of_birth), ':=' (day_of_birth = 16, inputed_birth_day = T)]
PERSONS[is.na(month_of_birth) & !is.na(year_of_birth), ':=' (month_of_birth = 6, inputed_birth_month = T)]
PERSONS[is.na(day_of_death) & is.na(month_of_death) & !is.na(year_of_death), ':=' (day_of_death = 1, month_of_death = 6, inputed_death_day = T,inputed_death_month = T)]
PERSONS[is.na(day_of_death) & !is.na(year_of_death), ':=' (day_of_death = 16, inputed_death_day = T)]
PERSONS[is.na(month_of_death) & !is.na(year_of_death), ':=' (month_of_death = 6, inputed_death_month = T)]
INPUTED <- PERSONS[inputed_birth_day == T |inputed_birth_month == T|inputed_death_day == T| inputed_death_month == T ,.(person_id,inputed_birth_day,inputed_birth_month,inputed_death_day,inputed_death_month)]
View(INPUTED)
saveRDS(INPUTED,file = paste0(std_pop_tmp,"INPUTED.rds"))
rm(INPUTED)
gc()
lapply(c("inputed_birth_day","inputed_birth_month","inputed_death_day","inputed_death_month"), function (x) PERSONS <- PERSONS[,eval(x) := NULL])
View(PERSONS)
print('Create birth and death dates')
PERSONS[!is.na(day_of_birth) & !is.na(month_of_birth) & !is.na(year_of_birth),birth_date := as.IDate(paste0(year_of_birth, sprintf("%02d",month_of_birth),sprintf("%02d",day_of_birth)),"%Y%m%d")]
PERSONS[!is.na(day_of_death) & !is.na(month_of_death) & !is.na(year_of_death),death_date := as.IDate(paste0(year_of_death, sprintf("%02d",month_of_death),sprintf("%02d",day_of_death)),"%Y%m%d")]
View(PERSONS)
PERSONS <- PERSONS[,age_start_study := floor(time_length(interval(birth_date, start_study_date),"year"))]
View(PERSONS)
print('Delete abundant columns and tables')
View(PERSONS)
saveRDS(PERSONS,file = paste0(std_pop_tmp,"PERSONS.rds"))
if(any(duplicated(PERSONS[["person_id"]]))) stop("Duplicates in person table")
rm(PERSONS,dates_persons)
gc()
if(SUBP) {
SCHEME_03 <- copy(subpopulation_meanings)
SCHEME_03 <- SCHEME_03[, ':=' (file_in = paste0(subpopulations,"_OBS_SPELLS.rds"), file_out = paste0(subpopulations,"_source_population.rds"), folder_out = "tmp2") ]
SCHEME_03 <- rbind(data.frame(subpopulations = c("ALL"),meaning_sets = "ALL",file_in = "ALL_OBS_SPELLS.rds", file_out = "ALL_source_population.rds", folder_out = "tmp2"),SCHEME_03)
}
if(!SUBP) SCHEME_03 <- data.frame(subpopulations = c("ALL"),file_in = "ALL_OBS_SPELLS.rds", file_out = "ALL_source_population.rds", folder_out = "tmp2")
!SUBP
View(SCHEME_03)
nrow(SCHEME_03)
PERSONS <- readRDS(paste0(std_pop_tmp,"PERSONS.rds"))
i =1
SPELLS <- readRDS(paste0(std_pop_tmp,SCHEME_03[["file_in"]][i]))
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
########################################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
########################################################################################################################
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
########################################################################################################################
#Specify all variables of interest to generate the Lifestyle report
########################################################################################################################
#Variables of interest:Smoking, Folic acid use, Alcohol abuse, BMI, SES
#1.Identify the CDM table you used to save the information about the variables of interest.
#2.Identify the original name of the variable of interest.
#3.Use the information above to complete the list below.
#4.CDM_table:name of the CDM table where you saved the information.
#5.CDM_column: name of the CDM column where you saved the information about the name of the variable of interest.
#6.value: name of the original variable.
#7.c.voc: name of the CDM column where you saved the vocabulary representing the variable of interest.If no vocabulary fill NULL
#8.v.voc: the vocabulary used for the variable of interest.If no vocabulary fill NULL
#9.v.date: name of the CDM column which saves the date of recording.
#10.If you don't have information about a variable then delete that section and use Lifestyle <- list()
#example BMI(saved in MEDICAL_OBSERVATIONS, original name: body_mass_index, unit:kg/m2)
#  BMI = list(
#    CDM_table = "MEDICAL_OBSERVATIONS",
#    CDM_column = "mo_source_column",
#    value = "body_mass_index",
#    c.voc = "mo_record_vocabulary",
#    v.voc = "ICD9",
#    v.date = "mo_date"
#  )
#Smoking = list(
#  CDM_table = "SURVEY_OBSERVATIONS",
#  CDM_column = "so_source_column",
#  value = c("SMOKING","SMOKESEV"),
#  c.voc = NULL,
#  v.voc = NULL,
#  v.date = "so_date"
#)
Lifestyle <- list()
# Lifestyle <- list(
#   Smoking = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Folic_acid = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Alcohol = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   BMI = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   ),
#   SES = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   )
# )
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
source(paste0(pre_dir,"study_parameters.R"))
setwd(projectFolder)
#Author: Vjola Hoxhaj Drs./Roel Elbers MSc.
#email: v.hoxhaj@umcutrecht.nl/r.j.h.elbers@umcutrecht.nl
#Organisation: UMC Utrecht, Utrecht, The Netherlands
#Date: 15/07/2021
#################################################################
#Study_population and Source_population
################################################################
########################################################
#Create output folders
########################################################
if (subpopulations_present=="No"){
#output folder for STUDY_SOURCE_POPULATION report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
} else {
#Create the  folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
} else {
#output folder for MEDICINES report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
do.call(file.remove, list(list.files(std_source_pop_dir, full.names = T)))
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
} else {
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
}
#######################################################
#std_source_pop_dir output folder for study_source population
#std_pop_tmp output folder for temporary files
#############################################################
#Load functions
source(paste0(pre_dir,"functions/", "CreateSpells_v_10.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV12.5.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV13.6.R"))
source(paste0(pre_dir,"functions/", "DRECountThresholdV3.R"))
source(paste0(pre_dir,"functions/", "FUNCTIONS.R"))
#Set parameters
source(paste0(pre_dir,"Step_00_SetParameters.R"))
#Preparation of analyses input tables
source(paste0(pre_dir,"Step_01_CreateSpells.R"))
source(paste0(pre_dir,"Step_02_PreparePersonsTable.R"))
if(SUBP) {
SCHEME_03 <- copy(subpopulation_meanings)
SCHEME_03 <- SCHEME_03[, ':=' (file_in = paste0(subpopulations,"_OBS_SPELLS.rds"), file_out = paste0(subpopulations,"_source_population.rds"), folder_out = "tmp2") ]
SCHEME_03 <- rbind(data.frame(subpopulations = c("ALL"),meaning_sets = "ALL",file_in = "ALL_OBS_SPELLS.rds", file_out = "ALL_source_population.rds", folder_out = "tmp2"),SCHEME_03)
}
if(!SUBP) SCHEME_03 <- data.frame(subpopulations = c("ALL"),file_in = "ALL_OBS_SPELLS.rds", file_out = "ALL_source_population.rds", folder_out = "tmp2")
PERSONS <- readRDS(paste0(std_pop_tmp,"PERSONS.rds"))
i=1
SPELLS <- readRDS(paste0(std_pop_tmp,SCHEME_03[["file_in"]][i]))
View(SPELLS)
if(!SUBP) if(any(duplicated(SPELLS[["person_id"]]))) stop("Duplicates in person or observation_period table")
if(SUBP) if(any(duplicated(SPELLS[,.(person_id)]))) stop("Duplicates in person or observation_period table")
print(paste0("Merge person table with observation_periods table ",SCHEME_03[["subpopulations"]][i]))
setkey(PERSONS,"person_id")
setkey(SPELLS,"person_id")
SOURCE_POPULATION <- merge(PERSONS,SPELLS,all.x = T)
View(SOURCE_POPULATION)
##Would did be neccesarry?? Maybe some diagnoses are before birth but observation age starts at o year
print(paste0("If op_start_date is before birth_date replace op_start_date with birth_date ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[op_start_date < birth_date, op_start_date := birth_date]
print(paste0("Calculate age at op_start_date and op_end_date and dates of which Age_min and Age_max are reached  ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[, ':='
(age_op_start_date = floor(time_length(interval(birth_date, op_start_date),"year")),
age_op_end_date = floor(time_length(interval(birth_date, op_end_date),"year")),
date_min = as.IDate(add_with_rollback(birth_date, period(Age_min,units = "year"), roll_to_first = T, preserve_hms = T)),
date_max = as.IDate(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
)
]
View(SOURCE_POPULATION)
SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date)]
SOURCE_POPULATION <- SOURCE_POPULATION[, Population := SCHEME_03[["subpopulations"]][i]]
View(SOURCE_POPULATION)
saveRDS(SOURCE_POPULATION,file = paste0(std_pop_tmp,SCHEME_03[["file_out"]][i]))
rm(SPELLS,SOURCE_POPULATION)
gc()
saveRDS(SCHEME_03,file = paste0(std_pop_tmp,"SCHEME_03.rds"))
rm(SCHEME_03,PERSONS)
gc()
if(SUBP){
SCHEME_04 <- copy(subpopulation_meanings)
SCHEME_04 <- SCHEME_04[, ':=' (file_in = paste0(subpopulations,"_source_population.rds"), file_out = paste0(subpopulations,"_study_population.rds"), folder_out = "populations") ]
}
if(!SUBP) SCHEME_04 <- data.frame(subpopulations = c("ALL"),file_in = "ALL_source_population.rds", file_out = "ALL_study_population.rds",folder_out = "populations")
SCHEME_04$nrows <- as.integer(NA)
SCHEME_04$ncols <- as.integer(NA)
SCHEME_04$ncolsneeded <- 23
View(SCHEME_04)
FlowChartSourcetoStudy <- list()
i=1
SOURCE <- readRDS(paste0(std_pop_tmp, SCHEME_04[["file_in"]][i]))
print('Exclude patients according to SelectionCriteria specified in to_run file')
for (j in 1:length(SelectionCriteria)){
before <- nrow(SOURCE)
SOURCE <- SOURCE[eval(SelectionCriteria[[j]]),]
after <- nrow(SOURCE)
FlowChartSourcetoStudy[[paste0(names(SelectionCriteria[j]),"_",SCHEME_04[["subpopulations"]][i])]]$step <- "04_CreateStudyPopulation"
FlowChartSourcetoStudy[[paste0(names(SelectionCriteria[j]),"_",SCHEME_04[["subpopulations"]][i])]]$population <- SCHEME_04[["subpopulations"]][i]
FlowChartSourcetoStudy[[paste0(names(SelectionCriteria[j]),"_",SCHEME_04[["subpopulations"]][i])]]$before <- before
FlowChartSourcetoStudy[[paste0(names(SelectionCriteria[j]),"_",SCHEME_04[["subpopulations"]][i])]]$after <- after
rm(before,after)
gc()
}
FlowChart3 <- list()
View(SOURCE)
View(FlowChartSourcetoStudy)
STUDY_POPULATION <- SOURCE[,start_follow_up := max(start_study_date,op_start_date+lookback_period,date_min),by = list(row.names(SOURCE))]
STUDY_POPULATION <- STUDY_POPULATION[,end_follow_up := min(end_study_date,op_end_date,date_creation,recommended_end_date,date_max),by = list(row.names(SOURCE))]
STUDY_POPULATION <- STUDY_POPULATION[,end_follow_up := min(end_study_date,op_end_date,date_creation,recommended_end_date,date_max),by = list(row.names(SOURCE))]
View(STUDY_POPULATION)
rm(SOURCE)
gc()
before <- nrow(STUDY_POPULATION)
STUDY_POPULATION <- STUDY_POPULATION[start_follow_up < end_follow_up ,]
STUDY_POPULATION <- STUDY_POPULATION[(start_follow_up - op_start_date) >= lookback_period ,]
after <- nrow(STUDY_POPULATION)
FlowChart3[[paste0("End_look_back_period_after_end_follow_up_",SCHEME_04[["subpopulations"]][i])]]$step <- "04_CreateStudyPopulation"
FlowChart3[[paste0("End_look_back_period_after_end_follow_up_",SCHEME_04[["subpopulations"]][i])]]$population <- SCHEME_04[["subpopulations"]][i]
FlowChart3[[paste0("End_look_back_period_after_end_follow_up_",SCHEME_04[["subpopulations"]][i])]]$before <- before
FlowChart3[[paste0("End_look_back_period_after_end_follow_up_",SCHEME_04[["subpopulations"]][i])]]$after <- after
View(FlowChart3)
m
rm(before,after)
gc()
print(paste0("Calculate age at start and end follow up ",SCHEME_04[["subpopulations"]][i]))
STUDY_POPULATION <- STUDY_POPULATION[, ':='
(age_start_follow_up = floor(time_length(interval(birth_date, start_follow_up),"year")),
age_end_follow_up = floor(time_length(interval(birth_date, end_follow_up),"year"))
)
]
STUDY_POPULATION <- STUDY_POPULATION[, Population := SCHEME_04[["subpopulations"]][i]]
SCHEME_04[i,"nrows"] <- nrow(STUDY_POPULATION)
SCHEME_04[i,"ncols"] <- ncol(STUDY_POPULATION)
saveRDS(STUDY_POPULATION,file = paste0(populations_dir,SCHEME_04[["file_out"]][i]))
rm(STUDY_POPULATION)
gc()
saveRDS(FlowChart3,file = paste0(std_pop_tmp,"FlowChart3.rds"))
saveRDS(FlowChartSourcetoStudy,file = paste0(std_pop_tmp,"FlowChartSourcetoStudy.rds"))
saveRDS(SCHEME_04,file = paste0(std_pop_tmp,"SCHEME_04.rds"))
rm(FlowChart3,FlowChartSourcetoStudy,SCHEME_04)
gc()
rm(list = ls(all=TRUE))
if (!require("rstudioapi")) install.packages("rstudioapi")
if (!require("data.table")) install.packages("data.table")
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
CreateLargeSimulatedDatasetCSV <- function(Inputfolder, Outputfolder, N, Identifier_name, Delimiter){
files <- list.files(Inputfolder, pattern = paste0("*.", "csv"))
dir.create(Outputfolder, showWarnings = FALSE)
for(i in files){
File<-fread(paste0(Inputfolder, '/', i), sep = Delimiter, stringsAsFactors = F)
if(!any(colnames(File) == Identifier_name)){
fwrite(File, file = paste0(Outputfolder, "/", i), sep = Delimiter, col.names = F, row.names = F, na = "", append = F)
next
}
for(j in 1:N){
File_temp <- copy(File)
File_temp[,eval(Identifier_name) := paste0(get(Identifier_name), "_", j)]
if(j == 1) fwrite(File_temp, file = paste0(Outputfolder, "/", i), sep = Delimiter, row.names = F, na = "", append = F)
if(j > 1) fwrite(File_temp, file = paste0(Outputfolder, "/", i), sep = Delimiter, col.names = F, row.names = F, na = "", append = T)
}
}
}
CreateLargeSimulatedDatasetCSV(
Inputfolder = paste0(folder,"/Pfizer"),
Outputfolder = paste0(folder,"/Medium"),
N = 1000,
Identifier_name = "person_id",
Delimiter = ";"
)
