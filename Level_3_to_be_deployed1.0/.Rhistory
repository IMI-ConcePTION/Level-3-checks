######################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
########################################################
#Create output folders
########################################################
if (subpopulations_present=="No"){
#output folder for STUDY_SOURCE_POPULATION report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
} else {
#Create the  folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
} else {
#output folder for MEDICINES report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
do.call(file.remove, list(list.files(std_source_pop_dir, full.names = T)))
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
} else {
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
}
#Load functions
source(paste0(pre_dir,"functions/", "CreateSpells_v_10.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV12.5.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV13.4.R"))
source(paste0(pre_dir,"functions/", "DRECountThresholdV3.R"))
source(paste0(pre_dir,"functions/", "FUNCTIONS.R"))
#Set parameters
source(paste0(pre_dir,"Step_00_SetParameters.R"))
#Preparation of analyses input tables
source(paste0(pre_dir,"Step_01_CreateSpells.R"))
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
###################################################
#Parameters
#################################################
#females age
min_age_preg<-12
max_age_preg<-55
#Set parameters basic parameters
start_study_date <- "19950101"
end_study_date <- "20211231"
lookback_period <- 365
Age_max <- 56
Age_min <- 0
######################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
#######################################################################################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
#Create report
for(i in readRDS(paste0(std_pop_tmp,"SCHEME_06.rds"))[["subpopulations"]]){
rmarkdown::render(paste0(pre_dir,"Report_01_StudyPopulation.Rmd"),
output_file = paste0(std_source_pop_dir,"Report_01_Study_population",i,".html"),
output_dir = std_source_pop_dir
)
}
####################################################
#Medicine exposure
####################################################
Rmd_MEDICINES<-paste0(pre_dir,"/MEDICINES_L3.Rmd")
system.time(source(paste0(pre_dir,"MEDICINES_L3.R")))
if(length(actual_tables$MEDICINES)>0){
if(subpopulations_present=="No"){
system.time(render(Rmd_MEDICINES, output_dir = paste0(output_dir,"MEDICINES/"), output_file = "MEDICINES_L3.html"))
} else {
for (a in 1: length(subpopulations_names)){
system.time(render(Rmd_MEDICINES, output_dir = paste0(output_dir,"MEDICINES/"), output_file = paste0(subpopulations_names[a],"_MEDICINES_L3.html")))
}
}
}
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
###################################################
#Parameters
#################################################
#females age
min_age_preg<-12
max_age_preg<-55
#Set parameters basic parameters
start_study_date <- "20140101"
end_study_date <- "20181231"
lookback_period <- 365
Age_min <- 0
Age_max <- 56
######################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
#######################################################################################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
########################################################
#Create output folders
########################################################
if (subpopulations_present=="No"){
#output folder for STUDY_SOURCE_POPULATION report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
} else {
#Create the  folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
} else {
#output folder for MEDICINES report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
do.call(file.remove, list(list.files(std_source_pop_dir, full.names = T)))
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
} else {
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
}
#Load functions
source(paste0(pre_dir,"functions/", "CreateSpells_v_10.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV12.5.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV13.4.R"))
source(paste0(pre_dir,"functions/", "DRECountThresholdV3.R"))
source(paste0(pre_dir,"functions/", "FUNCTIONS.R"))
#Set parameters
source(paste0(pre_dir,"Step_00_SetParameters.R"))
############################################################################################
#Get cdm_source file name
cdm_source_file<-list.files(path_dir, pattern="^CDM_SOURCE")
#Get DAP info and date createion fro CDM_SOURCE
CDM_SOURCE<-fread(paste0(path_dir, cdm_source_file))
date_creation<-CDM_SOURCE[,date_creation]
data_access_provider_name<-CDM_SOURCE[,data_access_provider_name]
data_source_name<-CDM_SOURCE[,data_source_name]
recommended_end_date <- as.IDate(as.character(CDM_SOURCE$recommended_end_date),"%Y%m%d")
rm(CDM_SOURCE, cdm_source_file)
#########################################################
#date transformations
#######################################################
start_study_date <- as.IDate(start_study_date,"%Y%m%d")
end_study_date <- as.IDate(end_study_date,"%Y%m%d")
date_creation<-as.IDate(date_creation,"%Y%m%d")
date_creation<-as.IDate(as.character(date_creation),"%Y%m%d")
intv <- as.IDate(c(start_study_date, end_study_date))
##########################################################
print("Check date creation is after end study date")
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
########################################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
########################################################################################################################
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
########################################################################################################################
#Specify all variables of interest to generate the Lifestyle report
########################################################################################################################
#Variables of interest:Smoking, Folic acid use, Alcohol abuse, BMI, SES
#1.Identify the CDM table you used to save the information about the variables of interest.
#2.Identify the original name of the variable of interest.
#3.Use the information above to complete the list below.
#4.CDM_table:name of the CDM table where you saved the information.
#5.CDM_column: name of the CDM column where you saved the information about the name of the variable of interest.
#6.value: name of the original variable.
#7.c.voc: name of the CDM column where you saved the vocabulary representing the variable of interest.If no vocabulary fill NULL
#8.v.voc: the vocabulary used for the variable of interest.If no vocabulary fill NULL
#9.v.date: name of the CDM column which saves the date of recording.
#10.If you don't have information about a variable then delete that section and use Lifestyle <- list()
#example BMI(saved in MEDICAL_OBSERVATIONS, original name: body_mass_index, unit:kg/m2)
#  BMI = list(
#    CDM_table = "MEDICAL_OBSERVATIONS",
#    CDM_column = "mo_source_column",
#    value = "body_mass_index",
#    c.voc = "mo_record_vocabulary",
#    v.voc = "ICD9",
#    v.date = "mo_date"
#  )
#Smoking = list(
#  CDM_table = "SURVEY_OBSERVATIONS",
#  CDM_column = "so_source_column",
#  value = c("SMOKING","SMOKESEV"),
#  c.voc = NULL,
#  v.voc = NULL,
#  v.date = "so_date"
#)
Lifestyle <- list()
# Lifestyle <- list(
#   Smoking = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Folic_acid = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Alcohol = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   BMI = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   ),
#   SES = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   )
# )
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
source(paste0(pre_dir,"study_parameters.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
#Create report
for(i in readRDS(paste0(std_pop_tmp,"SCHEME_06.rds"))[["subpopulations"]]){
if(SUBP) {
report_dir1 <- paste0(std_source_pop_dir,i)
report_dir2 <- paste0(std_source_pop_dir,i,"/Masked")
}else{
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
}
rmarkdown::render(paste0(pre_dir,"Report_01_StudyPopulation.Rmd"),
output_file = paste0(report_dir1,"/","Report_01_Study_population_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_02_Dates.Rmd"),
output_file = paste0(report_dir1,"/","Report_02_Dates_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_03_VisitsLifestyle.Rmd"),
output_file = paste0(report_dir1,"/","Report_03_VisitsLifestyle_",i,".html"),
output_dir = report_dir1
)
rm(report_dir1,report_dir2)
}
print('Import and append persons files')
VISITS <- IMPORT_PATTERN(pat = "VISIT_OCCURRENCE", dir = path_dir)
VISITS<-VISITS[,.(person_id,visit_occurrence_id,visit_start_date,visit_end_date,meaning_of_visit)]
lapply(c("visit_start_date","visit_end_date"), function (x) VISITS <- VISITS[, eval(x) := as.IDate(as.character(get(x)),"%Y%m%d")]  )
saveRDS(VISITS,file = paste0(std_pop_tmp,"VISITS.rds"))
rm(VISITS)
if(SUBP) SCHEME_0112 <- subpopulation_meanings[,
':='
(
file_in = paste0(subpopulations,"_study_population.rds"),
file_in2 = "VISITS.rds",
file_out = paste0(subpopulations,"_R_01_12_VISITS.csv"),
folder_in = populations_dir,
folder_in2 = std_pop_tmp,
folder_out =paste0(std_source_pop_dir,subpopulations,"/"))
]
SUBP
i=1
STUDY_POPULATION <- readRDS(file = paste0(SCHEME_0112[["folder_in"]][i],SCHEME_0112[["file_in"]][i]))[, .(person_id, birth_date, start_follow_up, end_follow_up,PY)]
VISITS <- readRDS(file = paste0(SCHEME_0112[["folder_in2"]][i],SCHEME_0112[["file_in2"]][i]))
TEMP <- merge(STUDY_POPULATION, VISITS, by = "person_id", allow.cartesian = T)
TEMP <- TEMP[visit_start_date %between% list(start_follow_up,end_follow_up),]
TEMP <- TEMP[,
':='
(
Year_visit = year(visit_start_date),
Age_visit =  floor(time_length(interval(birth_date, visit_start_date),"year"))
)
]
View(TEMP)
View(TEMP)
TEMP2 <- merge(x= STUDY_POPULATION[,.(person_id, start_follow_up, end_follow_up)], y = TEMP[, ':=' (start_follow_up = NULL, end_follow_up = NULL) ], by = "person_id", all.x = T)
print('Import and append persons files')
VISITS <- IMPORT_PATTERN(pat = "VISIT_OCCURRENCE", dir = path_dir)
if(!is.null(VISITS)){
VISITS<-VISITS[,.(person_id,visit_occurrence_id,visit_start_date,visit_end_date,meaning_of_visit)]
lapply(c("visit_start_date","visit_end_date"), function (x) VISITS <- VISITS[, eval(x) := as.IDate(as.character(get(x)),"%Y%m%d")]  )
}else{
VISITS <- data.table(person_id = as.character(), visit_occurrence_id = as.character(),visit_start_date = as.character(),visit_end_date = as.character(),meaning_of_visit = as.character())
}
saveRDS(VISITS,file = paste0(std_pop_tmp,"VISITS.rds"))
rm(VISITS)
if(SUBP) SCHEME_0112 <- subpopulation_meanings[,
':='
(
file_in = paste0(subpopulations,"_study_population.rds"),
file_in2 = "VISITS.rds",
file_out = paste0(subpopulations,"_R_01_12_VISITS.csv"),
folder_in = populations_dir,
folder_in2 = std_pop_tmp,
folder_out =paste0(std_source_pop_dir,subpopulations,"/"))
]
if(!SUBP){
subpopulations <- "ALL"
SCHEME_0112 <- data.frame(subpopulations = c("ALL"),
file_in = paste0(subpopulations,"_study_population.rds"),
file_in2 = "VISITS.rds",
file_out = paste0(subpopulations,"_R_01_12_VISITS.csv"),
folder_in = populations_dir,
folder_in2 = std_pop_tmp,
folder_out = std_source_pop_dir)
rm(subpopulations)
}
i=1
STUDY_POPULATION <- readRDS(file = paste0(SCHEME_0112[["folder_in"]][i],SCHEME_0112[["file_in"]][i]))[, .(person_id, birth_date, start_follow_up, end_follow_up,PY)]
VISITS <- readRDS(file = paste0(SCHEME_0112[["folder_in2"]][i],SCHEME_0112[["file_in2"]][i]))
start_study_date
VISITS
VISITS[,.("person_id", "visit_start_date", "meaning_of_the_visit")]
VISITS[,.(person_id, visit_start_date, meaning_of_the_visit)]
View(VISITS)
VISITS[,.(person_id, visit_start_date, meaning_of_visit)]
EVENTS2 <- readRDS("C:/Users/relbers/Documents/GitHub/CoutPersonTime/EVENTS2.rds")
View(EVENTS2)
length(unique(VISITS[["meaning_of_visit"]]))
rep(length(unique(VISITS[["meaning_of_visit"]])), 0)
rep(0, length(unique(VISITS[["meaning_of_visit"]])))
TEMP <- CountPersonTime2(
Dataset = STUDY_POPULATION,
Dataset_events = VISITS[,.(person_id, visit_start_date, meaning_of_visit)],
Name_event = "meaning_of_visit",
Date_event = "visit_start_date",
Outcomes_rec = unique(VISITS[["meaning_of_visit"]]),
Rec_period = rep(0, length(unique(VISITS[["meaning_of_visit"]]))),
Person_id = "person_id",
Start_study_time = start_study_date,
End_study_time = end_study_date,
Start_date = "start_follow_up",
End_date = "end_follow_up",
Birth_date = "birth_date",
Age_bands = c(0,0,9,19,29,39,49,59,69,79,89,99),
Unit_of_age = "year" ,
Increment = "year",
include_remaning_ages = T,
Aggregate = F
)
start_study_date
TEMP <- CountPersonTime2(
Dataset = STUDY_POPULATION,
Dataset_events = VISITS[,.(person_id, visit_start_date, meaning_of_visit)],
Name_event = "meaning_of_visit",
Date_event = "visit_start_date",
Outcomes_rec = unique(VISITS[["meaning_of_visit"]]),
Rec_period = rep(0, length(unique(VISITS[["meaning_of_visit"]]))),
Person_id = "person_id",
Start_study_time = start_study_date2,
End_study_time = end_study_date2,
Start_date = "start_follow_up",
End_date = "end_follow_up",
Birth_date = "birth_date",
Age_bands = c(0,0,9,19,29,39,49,59,69,79,89,99),
Unit_of_age = "year" ,
Increment = "year",
include_remaning_ages = T,
Aggregate = F
)
View(TEMP)
TEMP <- CountPersonTime2(
Dataset = STUDY_POPULATION,
Dataset_events = VISITS[,.(person_id, visit_start_date, meaning_of_visit)],
Name_event = "meaning_of_visit",
Date_event = "visit_start_date",
Outcomes_rec = unique(VISITS[["meaning_of_visit"]]),
Rec_period = rep(0, length(unique(VISITS[["meaning_of_visit"]]))),
Person_id = "person_id",
Start_study_time = start_study_date2,
End_study_time = end_study_date2,
Start_date = "start_follow_up",
End_date = "end_follow_up",
Birth_date = "birth_date",
Age_bands = c(0,0,9,19,29,39,49,59,69,79,89,99),
Unit_of_age = "year" ,
Increment = "year",
include_remaning_ages = T,
Aggregate = T
)
View(TEMP)
View(TEMP)
