x <- rep(incedence, c(diff(cov_age),40))
temp <- as.data.table(cbind(x,c(1:length(x))))
colnames(temp) <- c("kans","Age")
age2 <- as.data.table(age)
colnames(age2) <- c("Age")
probs <- unlist(c(as.data.frame(merge(x = age2, y = temp, by = "Age" )[,2])))
rm(temp)
events <- rbinom(length(probs), 1, probs)
events <- which(events == 1)
if(length(events) > 0){
events <- start2 + events
file <- rbind(file,as.data.table(cbind(id = rep(id2,length(events)), date = events)))
}
}
return(file)
}
test <- create(
birth = "year_of_birth",
start = "op_start_date" ,
end = "op_end_date",
id = "person_id" ,
data = OBS,
v.age = cov_age ,
v.ir = incedence
)
View(test)
test <- create(
birth = "year_of_birth",
start = "op_start_date" ,
end = "op_end_date",
id = "person_id" ,
data = OBS,
v.age = cov_age ,
v.ir = incedence
)
View(test)
library("data.table")
fread("C:/test.csv")
test <- fread("C:/test.csv")
View(test)
View(test)
test[is.infinite(var1), test := T]
View(test)
test[var1 == "Inf", test2 := T]
View(test)
test[, test3 := NA]
View(test)
test[var1 == "NA", test4 := T]
View(test)
as.Date("20130814", "%Y%m%d")
Birth_date <- as.Date("20130814", "%Y%m%d")
as.IDate(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
as.Date(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
library(lubridate)
as.Date(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
as.Date(add_with_rollback(birth_date, period(0 + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
as.Date(add_with_rollback(birth_date, period(130 + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
birth_date <- as.Date("20130814", "%Y%m%d")
as.Date(add_with_rollback(birth_date, period(130 + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
########################################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
########################################################################################################################
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
########################################################################################################################
#Specify all variables of interest to generate the Lifestyle report
########################################################################################################################
#Variables of interest:Smoking, Folic acid use, Alcohol abuse, BMI, SES
#1.Identify the CDM table you used to save the information about the variables of interest.
#2.Identify the original name of the variable of interest.
#3.Use the information above to complete the list below.
#4.CDM_table:name of the CDM table where you saved the information.
#5.CDM_column: name of the CDM column where you saved the information about the name of the variable of interest.
#6.value: name of the original variable.
#7.c.voc: name of the CDM column where you saved the vocabulary representing the variable of interest.If no vocabulary fill NULL
#8.v.voc: the vocabulary used for the variable of interest.If no vocabulary fill NULL
#9.v.date: name of the CDM column which saves the date of recording.
#10.If you don't have information about a variable then delete that section and use Lifestyle <- list()
#example BMI(saved in MEDICAL_OBSERVATIONS, original name: body_mass_index, unit:kg/m2)
#  BMI = list(
#    CDM_table = "MEDICAL_OBSERVATIONS",
#    CDM_column = "mo_source_column",
#    value = "body_mass_index",
#    c.voc = "mo_record_vocabulary",
#    v.voc = "ICD9",
#    v.date = "mo_date"
#  )
#Smoking = list(
#  CDM_table = "SURVEY_OBSERVATIONS",
#  CDM_column = "so_source_column",
#  value = c("SMOKING","SMOKESEV"),
#  c.voc = NULL,
#  v.voc = NULL,
#  v.date = "so_date"
#)
Lifestyle <- list()
# Lifestyle <- list(
#   Smoking = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Folic_acid = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Alcohol = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   BMI = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   ),
#   SES = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   )
# )
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
source(paste0(pre_dir,"study_parameters.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
#################################################################
#Study_population and Source_population
################################################################
########################################################
#Create output folders
########################################################
if (subpopulations_present=="No"){
#output folder for STUDY_SOURCE_POPULATION report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
} else {
#Create the  folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
} else {
#output folder for MEDICINES report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
do.call(file.remove, list(list.files(std_source_pop_dir, full.names = T)))
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
} else {
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
}
#######################################################
#std_source_pop_dir output folder for study_source population
#std_pop_tmp output folder for temporary files
#############################################################
#Load functions
source(paste0(pre_dir,"functions/", "CreateSpells_v_10.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV12.5.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV13.6.R"))
source(paste0(pre_dir,"functions/", "DRECountThresholdV3.R"))
source(paste0(pre_dir,"functions/", "FUNCTIONS.R"))
#Set parameters
source(paste0(pre_dir,"Step_00_SetParameters.R"))
#Preparation of analyses input tables
source(paste0(pre_dir,"Step_01_CreateSpells.R"))
source(paste0(pre_dir,"Step_02_PreparePersonsTable.R"))
if(SUBP) {
SCHEME_03 <- copy(subpopulation_meanings)
SCHEME_03 <- SCHEME_03[, ':=' (file_in = paste0(subpopulations,"_OBS_SPELLS.rds"), file_out = paste0(subpopulations,"_source_population.rds"), folder_out = "tmp2") ]
SCHEME_03 <- rbind(data.frame(subpopulations = c("ALL"),meaning_sets = "ALL",file_in = "ALL_OBS_SPELLS.rds", file_out = "ALL_source_population.rds", folder_out = "tmp2"),SCHEME_03)
}
if(!SUBP) SCHEME_03 <- data.frame(subpopulations = c("ALL"),file_in = "ALL_OBS_SPELLS.rds", file_out = "ALL_source_population.rds", folder_out = "tmp2")
PERSONS <- readRDS(paste0(std_pop_tmp,"PERSONS.rds"))
i=1
SPELLS <- readRDS(paste0(std_pop_tmp,SCHEME_03[["file_in"]][i]))
if(!SUBP) if(any(duplicated(SPELLS[["person_id"]]))) stop("Duplicates in person or observation_period table")
if(SUBP) if(any(duplicated(SPELLS[,.(person_id)]))) stop("Duplicates in person or observation_period table")
#Overwrite num spell Request for  Vjola as extra check
setorder(SPELLS, person_id, op_start_date)
SPELLS <- SPELLS[, num_spell := seq_len(.N) , by = person_id]
print(paste0("Merge person table with observation_periods table ",SCHEME_03[["subpopulations"]][i]))
setkey(PERSONS,"person_id")
setkey(SPELLS,"person_id")
SOURCE_POPULATION <- merge(PERSONS,SPELLS,all.x = T)
##Would did be neccesarry?? Maybe some diagnoses are before birth but observation age starts at o year
print(paste0("If op_start_date is before birth_date replace op_start_date with birth_date ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[op_start_date < birth_date, op_start_date := birth_date]
print(paste0("Calculate age at op_start_date and op_end_date and dates of which Age_min and Age_max are reached  ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[, ':='
(age_op_start_date = floor(time_length(interval(birth_date, op_start_date),"year")),
age_op_end_date = floor(time_length(interval(birth_date, op_end_date),"year")),
date_min = as.IDate(add_with_rollback(birth_date, period(Age_min,units = "year"), roll_to_first = T, preserve_hms = T)),
date_max = as.IDate(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
)
]
TEST1 <- SOURCE_POPULATION[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)]
TEST2 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date)]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = row.names(SOURCE_POPULATION)]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = list(row.names(SOURCE_POPULATION))]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = list(rownames(SOURCE_POPULATION))]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), keyby = list(rownames(SOURCE_POPULATION))]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = list(row.names(SOURCE_POPULATION))]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = row.names(SOURCE_POPULATION)]
SOURCE_POPULATION <- SOURCE_POPULATION[, row := row.names(SOURCE_POPULATION)]
TEST1 <- SOURCE_POPULATION[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)]
TEST2 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date)]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = row]
View(TEST3)
TEST1 <- SOURCE_POPULATION[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)]
TEST2 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date)]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = row]
TEST4 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := pmin(date_max,death_date)]
View(TEST4)
TEST1 == TEST4
TEST1 == TEST3
any(!TEST1 == TEST3)
any(!TEST1 == TEST3, na.rm = T)
any(!TEST1[["date_max"]] == [["date_max"]])
any(!TEST1[["date_max"]] == TEST2[["date_max"]])
TEST1[["date_max"]]
TEST2[["date_max"]])
View(TEST1)
SOURCE_POPULATION <- SOURCE_POPULATION[, row := row.names(SOURCE_POPULATION)][!is.na(birth_date),]
TEST1 <- SOURCE_POPULATION[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)]
TEST2 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date)]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = row]
TEST4 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := pmin(date_max,death_date)]
any(!TEST1[["date_max"]] == TEST2[["date_max"]])
TEST1[["date_max"]] == TEST2[["date_max"]]
SPELLS <- readRDS(paste0(std_pop_tmp,SCHEME_03[["file_in"]][i]))
if(!SUBP) if(any(duplicated(SPELLS[["person_id"]]))) stop("Duplicates in person or observation_period table")
if(SUBP) if(any(duplicated(SPELLS[,.(person_id)]))) stop("Duplicates in person or observation_period table")
#Overwrite num spell Request for  Vjola as extra check
setorder(SPELLS, person_id, op_start_date)
SPELLS <- SPELLS[, num_spell := seq_len(.N) , by = person_id]
#SPELLS <- SPELLS[, num_spell3 := cumsum(!is.na(op_start_date)) , by = person_id]
print(paste0("Merge person table with observation_periods table ",SCHEME_03[["subpopulations"]][i]))
setkey(PERSONS,"person_id")
setkey(SPELLS,"person_id")
SOURCE_POPULATION <- merge(PERSONS,SPELLS,all.x = T)
##Would did be neccesarry?? Maybe some diagnoses are before birth but observation age starts at o year
print(paste0("If op_start_date is before birth_date replace op_start_date with birth_date ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[op_start_date < birth_date, op_start_date := birth_date]
print(paste0("Calculate age at op_start_date and op_end_date and dates of which Age_min and Age_max are reached  ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[, ':='
(age_op_start_date = floor(time_length(interval(birth_date, op_start_date),"year")),
age_op_end_date = floor(time_length(interval(birth_date, op_end_date),"year")),
date_min = as.IDate(add_with_rollback(birth_date, period(Age_min,units = "year"), roll_to_first = T, preserve_hms = T)),
date_max = as.IDate(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
)
]
SOURCE_POPULATION <- SOURCE_POPULATION[, row := row.names(SOURCE_POPULATION)][!is.na(birth_date),]
TEST1 <- SOURCE_POPULATION[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)]
TEST2 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date)]
TEST3 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = row]
TEST4 <- SOURCE_POPULATION <- SOURCE_POPULATION[!is.na(death_date), date_max := pmin(date_max,death_date)]
any(!TEST1[["date_max"]] == TEST2[["date_max"]])
View(TEST1)
View(TEST2)
SPELLS <- readRDS(paste0(std_pop_tmp,SCHEME_03[["file_in"]][i]))
if(!SUBP) if(any(duplicated(SPELLS[["person_id"]]))) stop("Duplicates in person or observation_period table")
if(SUBP) if(any(duplicated(SPELLS[,.(person_id)]))) stop("Duplicates in person or observation_period table")
#Overwrite num spell Request for  Vjola as extra check
setorder(SPELLS, person_id, op_start_date)
SPELLS <- SPELLS[, num_spell := seq_len(.N) , by = person_id]
#SPELLS <- SPELLS[, num_spell3 := cumsum(!is.na(op_start_date)) , by = person_id]
print(paste0("Merge person table with observation_periods table ",SCHEME_03[["subpopulations"]][i]))
setkey(PERSONS,"person_id")
setkey(SPELLS,"person_id")
SOURCE_POPULATION <- merge(PERSONS,SPELLS,all.x = T)
##Would did be neccesarry?? Maybe some diagnoses are before birth but observation age starts at o year
print(paste0("If op_start_date is before birth_date replace op_start_date with birth_date ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[op_start_date < birth_date, op_start_date := birth_date]
print(paste0("Calculate age at op_start_date and op_end_date and dates of which Age_min and Age_max are reached  ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[, ':='
(age_op_start_date = floor(time_length(interval(birth_date, op_start_date),"year")),
age_op_end_date = floor(time_length(interval(birth_date, op_end_date),"year")),
date_min = as.IDate(add_with_rollback(birth_date, period(Age_min,units = "year"), roll_to_first = T, preserve_hms = T)),
date_max = as.IDate(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
)
]
SOURCE_POPULATION <- SOURCE_POPULATION[, row := row.names(SOURCE_POPULATION)][!is.na(birth_date),]
TEST1 <- copy(SOURCE_POPULATION)[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)]
TEST2 <- copy(SOURCE_POPULATION) <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date)]
TEST3 <- copy(SOURCE_POPULATION) <- SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date), by = row]
TEST4 <- copy(SOURCE_POPULATION) <- SOURCE_POPULATION[!is.na(death_date), date_max := pmin(date_max,death_date)]
TEST2 <- copy(SOURCE_POPULATION)SOURCE_POPULATION[!is.na(death_date), date_max := min(date_max,death_date)]
TEST1 <- copy(SOURCE_POPULATION)[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)]
TEST2 <- copy(SOURCE_POPULATION)[!is.na(death_date), date_max := min(date_max,death_date)]
TEST3 <- copy(SOURCE_POPULATION)[!is.na(death_date), date_max := min(date_max,death_date), by = row]
TEST4 <- copy(SOURCE_POPULATION)[!is.na(death_date), date_max := pmin(date_max,death_date)]
any(!TEST1[["date_max"]] == TEST2[["date_max"]])
View(TEST1)
SPELLS <- readRDS(paste0(std_pop_tmp,SCHEME_03[["file_in"]][i]))
if(!SUBP) if(any(duplicated(SPELLS[["person_id"]]))) stop("Duplicates in person or observation_period table")
if(SUBP) if(any(duplicated(SPELLS[,.(person_id)]))) stop("Duplicates in person or observation_period table")
#Overwrite num spell Request for  Vjola as extra check
setorder(SPELLS, person_id, op_start_date)
SPELLS <- SPELLS[, num_spell := seq_len(.N) , by = person_id]
#SPELLS <- SPELLS[, num_spell3 := cumsum(!is.na(op_start_date)) , by = person_id]
print(paste0("Merge person table with observation_periods table ",SCHEME_03[["subpopulations"]][i]))
setkey(PERSONS,"person_id")
setkey(SPELLS,"person_id")
SOURCE_POPULATION <- merge(PERSONS,SPELLS,all.x = T)
##Would did be neccesarry?? Maybe some diagnoses are before birth but observation age starts at o year
print(paste0("If op_start_date is before birth_date replace op_start_date with birth_date ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[op_start_date < birth_date, op_start_date := birth_date]
print(paste0("Calculate age at op_start_date and op_end_date and dates of which Age_min and Age_max are reached  ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[, ':='
(age_op_start_date = floor(time_length(interval(birth_date, op_start_date),"year")),
age_op_end_date = floor(time_length(interval(birth_date, op_end_date),"year")),
date_min = as.IDate(add_with_rollback(birth_date, period(Age_min,units = "year"), roll_to_first = T, preserve_hms = T)),
date_max = as.IDate(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
)
]
SOURCE_POPULATION <- SOURCE_POPULATION[, row := row.names(SOURCE_POPULATION)][!is.na(birth_date),]
TEST1 <- copy(SOURCE_POPULATION)[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)]
View(TEST1)
View(SOURCE_POPULATION)
SPELLS <- readRDS(paste0(std_pop_tmp,SCHEME_03[["file_in"]][i]))
if(!SUBP) if(any(duplicated(SPELLS[["person_id"]]))) stop("Duplicates in person or observation_period table")
if(SUBP) if(any(duplicated(SPELLS[,.(person_id)]))) stop("Duplicates in person or observation_period table")
#Overwrite num spell Request for  Vjola as extra check
setorder(SPELLS, person_id, op_start_date)
SPELLS <- SPELLS[, num_spell := seq_len(.N) , by = person_id]
#SPELLS <- SPELLS[, num_spell3 := cumsum(!is.na(op_start_date)) , by = person_id]
print(paste0("Merge person table with observation_periods table ",SCHEME_03[["subpopulations"]][i]))
setkey(PERSONS,"person_id")
setkey(SPELLS,"person_id")
SOURCE_POPULATION <- merge(PERSONS,SPELLS,all.x = T)
##Would did be neccesarry?? Maybe some diagnoses are before birth but observation age starts at o year
print(paste0("If op_start_date is before birth_date replace op_start_date with birth_date ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[op_start_date < birth_date, op_start_date := birth_date]
print(paste0("Calculate age at op_start_date and op_end_date and dates of which Age_min and Age_max are reached  ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[, ':='
(age_op_start_date = floor(time_length(interval(birth_date, op_start_date),"year")),
age_op_end_date = floor(time_length(interval(birth_date, op_end_date),"year")),
date_min = as.IDate(add_with_rollback(birth_date, period(Age_min,units = "year"), roll_to_first = T, preserve_hms = T)),
date_max = as.IDate(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
)
]
SOURCE_POPULATION <- SOURCE_POPULATION[, row := row.names(SOURCE_POPULATION)][!is.na(birth_date),]
TEST1 <- copy(SOURCE_POPULATION)
TEST1 <- TEST1[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)]
TEST2 <- copy(SOURCE_POPULATION)
TEST2 <- TEST2[!is.na(death_date), date_max := min(date_max,death_date)]
TEST3 <- copy(SOURCE_POPULATION)
TEST3 <- TEST3[!is.na(death_date), date_max := min(date_max,death_date), by = row]
TEST4 <- copy(SOURCE_POPULATION)
TEST4 <- TEST4[!is.na(death_date), date_max := pmin(date_max,death_date)]
any(!TEST1[["date_max"]] == TEST2[["date_max"]])
any(!TEST1[["date_max"]] == TEST3[["date_max"]])
any(!TEST1[["date_max"]] == TEST4[["date_max"]])
system.time(TEST1 <- TEST1[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)])
TEST1 <- system.time(TEST1[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)])
SOURCE_POPULATION <- SOURCE_POPULATION[, row := row.names(SOURCE_POPULATION)][!is.na(birth_date),]
TEST1 <- copy(SOURCE_POPULATION)
system.time(TEST1 <- TEST1[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)])
TEST2 <- copy(SOURCE_POPULATION)
system.time(TEST2 <- TEST2[!is.na(death_date), date_max := min(date_max,death_date)])
TEST3 <- copy(SOURCE_POPULATION)
system.time(TEST3 <- TEST3[!is.na(death_date), date_max := min(date_max,death_date), by = row])
TEST4 <- copy(SOURCE_POPULATION)
system.time(TEST4 <- TEST4[!is.na(death_date), date_max := pmin(date_max,death_date)])
any(!TEST1[["date_max"]] == TEST2[["date_max"]])
any(!TEST1[["date_max"]] == TEST3[["date_max"]])
any(!TEST1[["date_max"]] == TEST4[["date_max"]])
SPELLS <- readRDS(paste0(std_pop_tmp,SCHEME_03[["file_in"]][i]))
if(!SUBP) if(any(duplicated(SPELLS[["person_id"]]))) stop("Duplicates in person or observation_period table")
if(SUBP) if(any(duplicated(SPELLS[,.(person_id)]))) stop("Duplicates in person or observation_period table")
#Overwrite num spell Request for  Vjola as extra check
setorder(SPELLS, person_id, op_start_date)
SPELLS <- SPELLS[, num_spell := seq_len(.N) , by = person_id]
#SPELLS <- SPELLS[, num_spell3 := cumsum(!is.na(op_start_date)) , by = person_id]
print(paste0("Merge person table with observation_periods table ",SCHEME_03[["subpopulations"]][i]))
setkey(PERSONS,"person_id")
setkey(SPELLS,"person_id")
SOURCE_POPULATION <- merge(PERSONS,SPELLS,all.x = T)
##Would did be neccesarry?? Maybe some diagnoses are before birth but observation age starts at o year
print(paste0("If op_start_date is before birth_date replace op_start_date with birth_date ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[op_start_date < birth_date, op_start_date := birth_date]
print(paste0("Calculate age at op_start_date and op_end_date and dates of which Age_min and Age_max are reached  ",SCHEME_03[["subpopulations"]][i]))
SOURCE_POPULATION <- SOURCE_POPULATION[, ':='
(age_op_start_date = floor(time_length(interval(birth_date, op_start_date),"year")),
age_op_end_date = floor(time_length(interval(birth_date, op_end_date),"year")),
date_min = as.IDate(add_with_rollback(birth_date, period(Age_min,units = "year"), roll_to_first = T, preserve_hms = T)),
date_max = as.IDate(add_with_rollback(birth_date, period(Age_max + 1,units = "year"), roll_to_first = T, preserve_hms = T))-1
)
]
SOURCE_POPULATION2 <- rep(SOURCE_POPULATION, 10)
SOURCE_POPULATION2 <- do.call(rbind,rep(SOURCE_POPULATION, 10))
View(SOURCE_POPULATION2)
SOURCE_POPULATION2 <- do.call(rbind,t(rep(SOURCE_POPULATION, 10)))
View(SOURCE_POPULATION2)
SOURCE_POPULATION2 <- do.call(rbind,replicate(SOURCE_POPULATION, 10))
SOURCE_POPULATION2 <- do.call(rbind,replicate(10, SOURCE_POPULATION))
View(SOURCE_POPULATION2)
replicate(10, SOURCE_POPULATION)
SOURCE_POPULATION2 <- SOURCE_POPULATION[rep(seq_len(nrow(SOURCE_POPULATION)), 10), ]
View(SOURCE_POPULATION2)
SOURCE_POPULATION2 <- SOURCE_POPULATION[rep(seq_len(nrow(SOURCE_POPULATION)), 1000), ]
SOURCE_POPULATION <- SOURCE_POPULATION[, row := row.names(SOURCE_POPULATION)][!is.na(birth_date),]
TEST1 <- copy(SOURCE_POPULATION)
system.time(TEST1 <- TEST1[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)])
TEST2 <- copy(SOURCE_POPULATION)
system.time(TEST2 <- TEST2[!is.na(death_date), date_max := min(date_max,death_date)])
TEST3 <- copy(SOURCE_POPULATION)
system.time(TEST3 <- TEST3[!is.na(death_date), date_max := min(date_max,death_date), by = row])
TEST4 <- copy(SOURCE_POPULATION)
system.time(TEST4 <- TEST4[!is.na(death_date), date_max := pmin(date_max,death_date)])
any(!TEST1[["date_max"]] == TEST2[["date_max"]])
any(!TEST1[["date_max"]] == TEST3[["date_max"]])
any(!TEST1[["date_max"]] == TEST4[["date_max"]])
SOURCE_POPULATION2 <- SOURCE_POPULATION[rep(seq_len(nrow(SOURCE_POPULATION)), 100000), ]
SOURCE_POPULATION2 <- SOURCE_POPULATION[rep(seq_len(nrow(SOURCE_POPULATION)), 10000), ]
SOURCE_POPULATION2 <- SOURCE_POPULATION2[, row := row.names(SOURCE_POPULATION2)][!is.na(birth_date),]
TEST1 <- copy(SOURCE_POPULATION2)
system.time(TEST1 <- TEST1[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)])
TEST2 <- copy(SOURCE_POPULATION2)
system.time(TEST2 <- TEST2[!is.na(death_date), date_max := min(date_max,death_date)])
TEST3 <- copy(SOURCE_POPULATION2)
system.time(TEST3 <- TEST3[!is.na(death_date), date_max := min(date_max,death_date), by = row])
TEST4 <- copy(SOURCE_POPULATION2)
system.time(TEST4 <- TEST4[!is.na(death_date), date_max := pmin(date_max,death_date)])
TEST1 <- copy(SOURCE_POPULATION2)
system.time(TEST1 <- TEST1[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)])
TEST2 <- copy(SOURCE_POPULATION2)
system.time(TEST2 <- TEST2[!is.na(death_date), date_max := min(date_max,death_date)])
TEST3 <- copy(SOURCE_POPULATION2)
system.time(TEST3 <- TEST3[!is.na(death_date), date_max := min(date_max,death_date), by = row])
TEST4 <- copy(SOURCE_POPULATION2)
system.time(TEST4 <- TEST4[!is.na(death_date), date_max := pmin(date_max,death_date)])
any(!TEST1[["date_max"]] == TEST2[["date_max"]])
any(!TEST1[["date_max"]] == TEST3[["date_max"]])
any(!TEST1[["date_max"]] == TEST4[["date_max"]])
TEST1 <- copy(SOURCE_POPULATION2)
system.time(TEST1 <- TEST1[!is.na(death_date), date_max := ifelse(date_max > death_date, death_date, date_max)])
TEST2 <- copy(SOURCE_POPULATION2)
system.time(TEST2 <- TEST2[!is.na(death_date), date_max := min(date_max,death_date)])
TEST3 <- copy(SOURCE_POPULATION2)
system.time(TEST3 <- TEST3[!is.na(death_date), date_max := min(date_max,death_date), by = row])
TEST4 <- copy(SOURCE_POPULATION2)
system.time(TEST4 <- TEST4[!is.na(death_date), date_max := pmin(date_max,death_date)])
any(!TEST1[["date_max"]] == TEST2[["date_max"]])
any(!TEST1[["date_max"]] == TEST3[["date_max"]])
any(!TEST1[["date_max"]] == TEST4[["date_max"]])
