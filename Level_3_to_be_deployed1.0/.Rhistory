#  c.voc = NULL,
#  v.voc = NULL,
#  v.date = "so_date"
#)
Lifestyle <- list()
# Lifestyle <- list(
#   Smoking = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Folic_acid = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Alcohol = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   BMI = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   ),
#   SES = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   )
# )
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
source(paste0(pre_dir,"study_parameters.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
#Create report
for(i in readRDS(paste0(std_pop_tmp,"SCHEME_06.rds"))[["subpopulations"]]){
if(SUBP) {
report_dir1 <- paste0(std_source_pop_dir,i)
report_dir2 <- paste0(std_source_pop_dir,i,"/Masked")
}else{
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
}
rmarkdown::render(paste0(pre_dir,"Report_01_StudyPopulation.Rmd"),
output_file = paste0(report_dir1,"/","Report_01_Study_population_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_02_Dates.Rmd"),
output_file = paste0(report_dir1,"/","Report_02_Dates_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_03_VisitsLifestyle.Rmd"),
output_file = paste0(report_dir1,"/","Report_03_VisitsLifestyle_",i,".html"),
output_dir = report_dir1
)
rm(report_dir1,report_dir2)
}
#Create report
for(i in readRDS(paste0(std_pop_tmp,"SCHEME_06.rds"))[["subpopulations"]]){
if(SUBP) {
report_dir1 <- paste0(std_source_pop_dir,i)
report_dir2 <- paste0(std_source_pop_dir,i,"/Masked")
}else{
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
}
rmarkdown::render(paste0(pre_dir,"Report_01_StudyPopulation.Rmd"),
output_file = paste0(report_dir1,"/","Report_01_Study_population_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_02_Dates.Rmd"),
output_file = paste0(report_dir1,"/","Report_02_Dates_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_03_VisitsLifestyle.Rmd"),
output_file = paste0(report_dir1,"/","Report_03_VisitsLifestyle_",i,".html"),
output_dir = report_dir1
)
rm(report_dir1,report_dir2)
}
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
########################################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
########################################################################################################################
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
########################################################################################################################
#Specify all variables of interest to generate the Lifestyle report
########################################################################################################################
#Variables of interest:Smoking, Folic acid use, Alcohol abuse, BMI, SES
#1.Identify the CDM table you used to save the information about the variables of interest.
#2.Identify the original name of the variable of interest.
#3.Use the information above to complete the list below.
#4.CDM_table:name of the CDM table where you saved the information.
#5.CDM_column: name of the CDM column where you saved the information about the name of the variable of interest.
#6.value: name of the original variable.
#7.c.voc: name of the CDM column where you saved the vocabulary representing the variable of interest.If no vocabulary fill NULL
#8.v.voc: the vocabulary used for the variable of interest.If no vocabulary fill NULL
#9.v.date: name of the CDM column which saves the date of recording.
#10.If you don't have information about a variable then delete that section and use Lifestyle <- list()
#example BMI(saved in MEDICAL_OBSERVATIONS, original name: body_mass_index, unit:kg/m2)
#  BMI = list(
#    CDM_table = "MEDICAL_OBSERVATIONS",
#    CDM_column = "mo_source_column",
#    value = "body_mass_index",
#    c.voc = "mo_record_vocabulary",
#    v.voc = "ICD9",
#    v.date = "mo_date"
#  )
#Smoking = list(
#  CDM_table = "SURVEY_OBSERVATIONS",
#  CDM_column = "so_source_column",
#  value = c("SMOKING","SMOKESEV"),
#  c.voc = NULL,
#  v.voc = NULL,
#  v.date = "so_date"
#)
Lifestyle <- list()
# Lifestyle <- list(
#   Smoking = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Folic_acid = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Alcohol = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   BMI = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   ),
#   SES = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   )
# )
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
source(paste0(pre_dir,"study_parameters.R"))
setwd(projectFolder)
#################################################
#Study_source_population
########################################################
#Create output folders
########################################################
if (subpopulations_present=="No"){
#output folder for STUDY_SOURCE_POPULATION report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
} else {
#Create the  folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
} else {
#output folder for MEDICINES report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
do.call(file.remove, list(list.files(std_source_pop_dir, full.names = T)))
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
} else {
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
}
#Load functions
source(paste0(pre_dir,"functions/", "CreateSpells_v_10.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV12.5.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV13.6.R"))
source(paste0(pre_dir,"functions/", "DRECountThresholdV3.R"))
source(paste0(pre_dir,"functions/", "FUNCTIONS.R"))
#Set parameters
source(paste0(pre_dir,"Step_00_SetParameters.R"))
#Preparation of analyses input tables
source(paste0(pre_dir,"Step_01_CreateSpells.R"))
source(paste0(pre_dir,"Step_02_PreparePersonsTable.R"))
if(SUBP) {
SCHEME_03 <- copy(subpopulation_meanings)
SCHEME_03 <- SCHEME_03[, ':=' (file_in = paste0(subpopulations,"_OBS_SPELLS.rds"), file_out = paste0(subpopulations,"_source_population.rds"), folder_out = "tmp2") ]
SCHEME_03 <- rbind(data.frame(subpopulations = c("ALL"),meaning_sets = "ALL",file_in = "ALL_OBS_SPELLS.rds", file_out = "ALL_source_population.rds", folder_out = "tmp2"),SCHEME_03)
}
if(!SUBP) SCHEME_03 <- data.frame(subpopulations = c("ALL"),file_in = "ALL_OBS_SPELLS.rds", file_out = "ALL_source_population.rds", folder_out = "tmp2")
i=1
SPELLS <- readRDS(paste0(std_pop_tmp,SCHEME_03[["file_in"]][i]))
if(!SUBP) if(any(duplicated(SPELLS[["person_id"]]))) stop("Duplicates in person or observation_period table")
if(SUBP) if(any(duplicated(SPELLS[,.(person_id)]))) stop("Duplicates in person or observation_period table")
View(SPELLS)
SPELLS <- SPELLS[, num_spell2 := row.names(SPELLs) , by = persom_id]
SPELLS <- SPELLS[, num_spell2 := row.names(SPELLs) , by = person_id]
SPELLS <- SPELLS[, num_spell2 := row.names(SPELLS) , by = person_id]
SPELLS <- SPELLS[, num_spell2 := rownames(SPELLS) , by = person_id]
SPELLS <- SPELLS[, num_spell2 := seq_len(.N) , by = person_id]
View(SPELLS)
SPELLS <- SPELLS[, num_spell2 := seq_len(.N) , by = op_start_date]
View(SPELLS)
SPELLS <- SPELLS[, num_spell2 := seq_len(.N) , by = list(person_id, op_start_date)]
View(SPELLS)
SPELLS <- SPELLS[, num_spell3 := rowid(SPELLS) , by = person_id]
SPELLS <- SPELLS[, num_spell3 := rowid , by = person_id]
SPELLS <- SPELLS[, num_spell3 := rowid(rleid(R)) , by = person_id]
SPELLS <- SPELLS[, num_spell3 := cumsum(!is.na(op_start_date)) , by = person_id]
View(SPELLS)
#Overwrite num spell Request for  Vjola as extra check
setorder(SPELLS, person_id, op_start_date)
SPELLS <- SPELLS[, num_spell := seq_len(.N) , by = person_id]
View(SPELLS)
round(0.3,1)
round(0.6,1)
round(0.03,1)
round(0.06,1)
source(paste0(pre_dir, "Step_03_CreateSourceTable.R"))
source(paste0(pre_dir,"Step_04_CreateStudyPopulation.R"))
#
source(paste0(pre_dir,"Step_05_AddVariablesSourcePopulation.R"))
source(paste0(pre_dir,"Step_06_AddVariablesStudyPopulation.R"))
#Save analyses output tables in output
source(paste0(pre_dir,"Step_Report_01_01_PopulationTree.R"))
R_01_01_POPTREE <- readRDS("H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION/R_01_01_POPTREE.rds")
View(R_01_01_POPTREE)
std_source_pop_dir <- "H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION"
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
std_source_pop_dir <- "H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION/"
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
View(TEMP)
TEMP <- t(TEMP)
colnames(TEMP) <- TEMP[1,]
TEMP <- TEMP[2:nrow(TEMP),]
TEMP[as.numeric(TEMP) < 13] <- "<5"
View(TEMP)
std_source_pop_dir <- "H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION/"
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
TEMP <- t(TEMP)
colnames(TEMP) <- TEMP[1,]
TEMP <- TEMP[2:nrow(TEMP),]
TEMP[as.numeric(TEMP) < 6] <- "<5"
View(TEMP)
View(TEMP)
TEMP[F == "<5" ,]
TEMP[1 == "<5" , ]
std_source_pop_dir <- "H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION/"
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
TEMP <- t(TEMP)
colnames(TEMP) <- TEMP[1,]
TEMP <- TEMP[2:nrow(TEMP),]
View(TEMP)
std_source_pop_dir <- "H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION/"
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
View(TEMP)
TEMP <- t(TEMP)
View(TEMP)
colnames(TEMP) <- TEMP[1,]
TEMP <- TEMP[2:nrow(TEMP),]
TEMP[as.numeric(TEMP) < 6] <- "<5"
TEMP[M == "<5" , ]
TEMP[1,] == "<5"
TEMP[,1] == "<5"
TEMP[TEMP[,1] == "<5"]
TEMP[TEMP[,1] == "<5",2] <- NA
TEMP[TEMP[,2] == "<5",1] <- NA
View(TEMP)
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
TEMP <- t(TEMP)
colnames(TEMP) <- TEMP[1,]
TEMP <- TEMP[2:nrow(TEMP),]
TEMP[as.numeric(TEMP) < 60] <- "<5"
TEMP[TEMP[,1] == "<5",2] <- NA
TEMP[TEMP[,2] == "<5",1] <- NA
std_source_pop_dir <- "H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION/"
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
TEMP <- t(TEMP)
colnames(TEMP) <- TEMP[1,]
TEMP <- TEMP[2:nrow(TEMP),]
TEMP[as.numeric(TEMP) < 60] <- "<5"
TEMP[TEMP[,1] == "<5" & TEMP[,2] != "<5",2] <- NA
TEMP[TEMP[,2] == "<5",1 & TEMP[,1] != "<5"] <- NA
std_source_pop_dir <- "H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION/"
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
TEMP <- t(TEMP)
colnames(TEMP) <- TEMP[1,]
TEMP <- TEMP[2:nrow(TEMP),]
TEMP[as.numeric(TEMP) < 60] <- "<5"
TEMP[TEMP[,1] == "<5" & TEMP[,2] != "<5",2] <- NA
TEMP[TEMP[,2] == "<5"& TEMP[,2] != "<5" ,1] <- NA
View(TEMP)
std_source_pop_dir <- "H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION/"
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
TEMP <- t(TEMP)
colnames(TEMP) <- TEMP[1,]
TEMP <- TEMP[2:nrow(TEMP),]
TEMP[as.numeric(TEMP) < 30] <- "<5"
TEMP[TEMP[,1] == "<5" & TEMP[,2] != "<5",2] <- NA
TEMP[TEMP[,2] == "<5"& TEMP[,2] != "<5" ,1] <- NA
View(TEMP)
std_source_pop_dir <- "H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_output/STUDY_SOURCE_POPULATION/"
TEMP <- fread(paste0(std_source_pop_dir,"R_01_01_POPTREE.csv"), sep = ";")
TEMP <- t(TEMP)
colnames(TEMP) <- TEMP[1,]
TEMP <- TEMP[2:nrow(TEMP),]
TEMP[as.numeric(TEMP) < 30] <- "<5"
TEMP[TEMP[,1] == "<5" & TEMP[,2] != "<5",2] <- NA
TEMP[TEMP[,2] == "<5"& TEMP[,1] != "<5" ,1] <- NA
View(TEMP)
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
########################################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
########################################################################################################################
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
########################################################################################################################
#Specify all variables of interest to generate the Lifestyle report
########################################################################################################################
#Variables of interest:Smoking, Folic acid use, Alcohol abuse, BMI, SES
#1.Identify the CDM table you used to save the information about the variables of interest.
#2.Identify the original name of the variable of interest.
#3.Use the information above to complete the list below.
#4.CDM_table:name of the CDM table where you saved the information.
#5.CDM_column: name of the CDM column where you saved the information about the name of the variable of interest.
#6.value: name of the original variable.
#7.c.voc: name of the CDM column where you saved the vocabulary representing the variable of interest.If no vocabulary fill NULL
#8.v.voc: the vocabulary used for the variable of interest.If no vocabulary fill NULL
#9.v.date: name of the CDM column which saves the date of recording.
#10.If you don't have information about a variable then delete that section and use Lifestyle <- list()
#example BMI(saved in MEDICAL_OBSERVATIONS, original name: body_mass_index, unit:kg/m2)
#  BMI = list(
#    CDM_table = "MEDICAL_OBSERVATIONS",
#    CDM_column = "mo_source_column",
#    value = "body_mass_index",
#    c.voc = "mo_record_vocabulary",
#    v.voc = "ICD9",
#    v.date = "mo_date"
#  )
#Smoking = list(
#  CDM_table = "SURVEY_OBSERVATIONS",
#  CDM_column = "so_source_column",
#  value = c("SMOKING","SMOKESEV"),
#  c.voc = NULL,
#  v.voc = NULL,
#  v.date = "so_date"
#)
Lifestyle <- list()
# Lifestyle <- list(
#   Smoking = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Folic_acid = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Alcohol = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   BMI = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   ),
#   SES = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   )
# )
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
source(paste0(pre_dir,"study_parameters.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
#Create report
for(i in readRDS(paste0(std_pop_tmp,"SCHEME_06.rds"))[["subpopulations"]]){
if(SUBP) {
report_dir1 <- paste0(std_source_pop_dir,i)
report_dir2 <- paste0(std_source_pop_dir,i,"/Masked")
}else{
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
}
rmarkdown::render(paste0(pre_dir,"Report_01_StudyPopulation.Rmd"),
output_file = paste0(report_dir1,"/","Report_01_Study_population_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_02_Dates.Rmd"),
output_file = paste0(report_dir1,"/","Report_02_Dates_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_03_VisitsLifestyle.Rmd"),
output_file = paste0(report_dir1,"/","Report_03_VisitsLifestyle_",i,".html"),
output_dir = report_dir1
)
rm(report_dir1,report_dir2)
}
